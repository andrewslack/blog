<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Defending the Code]]></title>
  <link href="http://andrewslack.github.com/blog/atom.xml" rel="self"/>
  <link href="http://andrewslack.github.com/blog/"/>
  <updated>2013-02-28T10:11:34-07:00</updated>
  <id>http://andrewslack.github.com/blog/</id>
  <author>
    <name><![CDATA[Andrew M. Slack]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Up and testing with Autotest and Growl]]></title>
    <link href="http://andrewslack.github.com/blog/2013/02/08/up-and-testing-with-autotest-and-growl/"/>
    <updated>2013-02-08T14:52:00-07:00</updated>
    <id>http://andrewslack.github.com/blog/2013/02/08/up-and-testing-with-autotest-and-growl</id>
    <content type="html"><![CDATA[<p>We know testing is great.  Write a test, run the test, make the test pass, refactor, rinse, repeat.  How about making automating the &#8220;run the test&#8221; step?</p>

<p>Yes, that would be great.</p>

<p>To get started add these items to your gemfile</p>

<figure class='code'><figcaption><span>[gemfile] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem "autotest"
</span><span class='line'>gem "autotest-growl"
</span><span class='line'>gem "autotest-fsevent"
</span><span class='line'>
</span><span class='line'>> bundle          # => to install these gems</span></code></pre></td></tr></table></div></figure>


<p>autotest-fsevent monitors for file changes and engages autotest when it finds a file that has changed (the way it does it is far more efficient than polling the filesystem), autotest is the gem that runs the tests and autotest-growl notifies Growl (<a href="http://growl.info/">1</a>) the test results.</p>

<p>Our tests will be written in Rspec and for this to look good we should add some pleasant formatting options. To do that we add the following to the .rpsec file:</p>

<figure class='code'><figcaption><span>[.rspec options] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--color
</span><span class='line'>--format nested</span></code></pre></td></tr></table></div></figure>


<p>For more options run rspec &#8211;help</p>

<p>When autotest fires up it looks for an .autotest settings file.  This file can be in the project folder and/or home folder, the former overrides the latter.  So for us we will drop our settings into a local .autotest</p>

<figure class='code'><figcaption><span>[.autotest options] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require "autotest/growl"         # =>  to interact with Growl
</span><span class='line'>require "autotest/fsevent"            # =>  to interact with filesystem events</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all the config settings we need.  Now we start up autotest [-v] from the commandline.  Go change a test and see autotest engage and notify you thru Growl!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Jenkins to run on a different port]]></title>
    <link href="http://andrewslack.github.com/blog/2013/02/06/getting-jenkins-to-run-on-a-different-port/"/>
    <updated>2013-02-06T10:57:00-07:00</updated>
    <id>http://andrewslack.github.com/blog/2013/02/06/getting-jenkins-to-run-on-a-different-port</id>
    <content type="html"><![CDATA[<p>The Jenkins launch daemon is defined here: /Library/LaunchDaemons/org.jenkins-ci.plist</p>

<figure class='code'><figcaption><span>[JSON] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?>
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
</span><span class='line'>&lt;plist version="1.0">
</span><span class='line'>&lt;dict>
</span><span class='line'>    &lt;key>StandardOutPath&lt;/key>
</span><span class='line'>    &lt;string>/var/log/jenkins/jenkins.log&lt;/string>
</span><span class='line'>    &lt;key>StandardErrorPath&lt;/key>
</span><span class='line'>    &lt;string>/var/log/jenkins/jenkins.log&lt;/string>
</span><span class='line'>  &lt;key>EnvironmentVariables&lt;/key>
</span><span class='line'>  &lt;dict>
</span><span class='line'>      &lt;key>JENKINS_HOME&lt;/key>
</span><span class='line'>      &lt;string>/Users/Shared/Jenkins/Home&lt;/string>
</span><span class='line'>  &lt;/dict>
</span><span class='line'>  &lt;key>GroupName&lt;/key>
</span><span class='line'>  &lt;string>daemon&lt;/string>
</span><span class='line'>  &lt;key>KeepAlive&lt;/key>
</span><span class='line'>  &lt;true/>
</span><span class='line'>  &lt;key>Label&lt;/key>
</span><span class='line'>  &lt;string>org.jenkins-ci&lt;/string>
</span><span class='line'>  &lt;key>ProgramArguments&lt;/key>
</span><span class='line'>  &lt;array>
</span><span class='line'>        &lt;string>/bin/bash&lt;/string>
</span><span class='line'>      &lt;string>/Library/Application Support/Jenkins/jenkins-runner.sh&lt;/string>
</span><span class='line'>  &lt;/array>
</span><span class='line'>  &lt;key>RunAtLoad&lt;/key>
</span><span class='line'>  &lt;true/>
</span><span class='line'>  &lt;key>UserName&lt;/key>
</span><span class='line'>  &lt;string>jenkins&lt;/string>
</span><span class='line'>    &lt;key>SessionCreate&lt;/key>
</span><span class='line'>  &lt;true />
</span><span class='line'>&lt;/dict>
</span><span class='line'>&lt;/plist></span></code></pre></td></tr></table></div></figure>


<p>This kicks off the /Library/Application Support/Jenkins/jenkins-runner.sh script which looks like this:</p>

<figure class='code'><figcaption><span>[jenkins-runner.sh] </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Startup script used by Jenkins launchd job.</span>
</span><span class='line'><span class="c"># Mac OS X launchd process calls this script to customize</span>
</span><span class='line'><span class="c"># the java process command line used to run Jenkins.</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># Customizable parameters are found in</span>
</span><span class='line'><span class="c"># /Library/Preferences/org.jenkins-ci.plist</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># You can manipulate it using the &quot;defaults&quot; utility.</span>
</span><span class='line'><span class="c"># See &quot;man defaults&quot; for details.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">defaults</span><span class="o">=</span><span class="s2">&quot;defaults read /Library/Preferences/org.jenkins-ci&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">war</span><span class="o">=</span><span class="sb">`</span><span class="nv">$defaults</span> war<span class="sb">`</span> <span class="o">||</span> <span class="nv">war</span><span class="o">=</span><span class="s2">&quot;/Applications/Jenkins/jenkins.war&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">javaArgs</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nv">heapSize</span><span class="o">=</span><span class="sb">`</span><span class="nv">$defaults</span> heapSize<span class="sb">`</span> <span class="o">&amp;&amp;</span> <span class="nv">javaArgs</span><span class="o">=</span><span class="s2">&quot;$javaArgs -Xmx${heapSize}&quot;</span>
</span><span class='line'><span class="nv">permGen</span><span class="o">=</span><span class="sb">`</span><span class="nv">$defaults</span> permGen<span class="sb">`</span> <span class="o">&amp;&amp;</span> <span class="nv">javaArgs</span><span class="o">=</span><span class="s2">&quot;$javaArgs -XX:MaxPermSize=${permGen}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">home</span><span class="o">=</span><span class="sb">`</span><span class="nv">$defaults</span> JENKINS_HOME<span class="sb">`</span> <span class="o">&amp;&amp;</span> <span class="nb">export </span><span class="nv">JENKINS_HOME</span><span class="o">=</span><span class="s2">&quot;$home&quot;</span>
</span><span class='line'>
</span><span class='line'>add_to_args<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">val</span><span class="o">=</span><span class="sb">`</span><span class="nv">$defaults</span> <span class="nv">$1</span><span class="sb">`</span> <span class="o">&amp;&amp;</span> <span class="nv">args</span><span class="o">=</span><span class="s2">&quot;$args --${1}=${val}&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">args</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>add_to_args prefix
</span><span class='line'>add_to_args httpPort
</span><span class='line'>add_to_args httpListenAddress
</span><span class='line'>add_to_args httpsPort
</span><span class='line'>add_to_args httpsListenAddress
</span><span class='line'>add_to_args ajp13Port
</span><span class='line'>add_to_args ajp13ListenAddress
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;JENKINS_HOME=$JENKINS_HOME&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Jenkins command line for execution:&quot;</span>
</span><span class='line'><span class="nb">echo</span> /usr/bin/java <span class="nv">$javaArgs</span> -jar <span class="s2">&quot;$war&quot;</span> <span class="nv">$args</span>
</span><span class='line'><span class="nb">exec</span> /usr/bin/java <span class="nv">$javaArgs</span> -jar <span class="s2">&quot;$war&quot;</span> <span class="nv">$args</span>
</span></code></pre></td></tr></table></div></figure>


<p>The interesting thing here is that it looks for defaults in /Library/Preferences/org.jenkins-ci.plist.  So if you want to change the port then you need to write an entry into that file.  The command will create the entry (and the file if it does not exist already):</p>

<figure class='code'><figcaption><span>[write a default value for the port] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo defaults write /Library/Preferences/org.jenkins-ci httpPort 8082</span></code></pre></td></tr></table></div></figure>


<p>Now reload the daemon</p>

<figure class='code'><figcaption><span>[write a default value for the port] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
</span><span class='line'>sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</span></code></pre></td></tr></table></div></figure>


<p>You can check Jenkins&#8217; progress via the log file that the daemon writes to at: /var/log/jenkins/jenkins.log</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changing the code page in Windows to help debug a UTF-8 issue]]></title>
    <link href="http://andrewslack.github.com/blog/2013/02/05/changing-the-code-page-in-windows-to-help-debug-a-utf-8-issue/"/>
    <updated>2013-02-05T13:37:00-07:00</updated>
    <id>http://andrewslack.github.com/blog/2013/02/05/changing-the-code-page-in-windows-to-help-debug-a-utf-8-issue</id>
    <content type="html"><![CDATA[<p>When viewing a document in a DOS box, mutlibyte characters may not render as you&#8217;d expect.  This may be due to the charset that the document was encoded in being at odds with the charset that is in play during your command line session.</p>

<p>To help with that we can use the chcp command to change the codepage, the command takes an (optional) numerical id of the code page (<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd317756%28v=vs.85%29.aspx">list of codepages</a>)</p>

<figure class='code'><figcaption><span>[chcp command] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> chcp               # displays the current code page
</span><span class='line'>Active code page: 437
</span><span class='line'>
</span><span class='line'>> chcp 65001          # changed to UTF-8
</span><span class='line'>Active code page: 65001</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[removing embedded documents from mongo]]></title>
    <link href="http://andrewslack.github.com/blog/2013/02/05/removing-embedded-documents-from-mongo/"/>
    <updated>2013-02-05T11:41:00-07:00</updated>
    <id>http://andrewslack.github.com/blog/2013/02/05/removing-embedded-documents-from-mongo</id>
    <content type="html"><![CDATA[<p>Here I have a ticker and some observations for that ticker</p>

<figure class='code'><figcaption><span>[JSON] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> db.tickers.find({symbol: "ACTC"}).pretty()
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>  "_id" : ObjectId("5110294822b958b2ff0001a7"),
</span><span class='line'>  "company_name" : "Advanced Cell Technology, Inc.",
</span><span class='line'>  "country_of_domicile" : "USA",
</span><span class='line'>  "observations" : [
</span><span class='line'>      {
</span><span class='line'>          "_id" : ObjectId("5111530522b958af28000001"),
</span><span class='line'>          "price" : 0.0776,
</span><span class='line'>          "trade_date_time" : ISODate("2013-02-05T20:28:00Z")
</span><span class='line'>      }
</span><span class='line'>  ],
</span><span class='line'>  "security_type" : "Common Stock",
</span><span class='line'>  "symbol" : "ACTC",
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>To remove all the observations:</p>

<figure class='code'><figcaption><span>[remove emmbedded document] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.tickers.update({symbol: "ACTC"}, {$pull: {observations: {$exists:true}}}, false, true)</span></code></pre></td></tr></table></div></figure>


<p>Which gives:</p>

<figure class='code'><figcaption><span>[JSON] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> db.tickers.find({symbol: "ACTC"}).pretty()
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>  "_id" : ObjectId("5110294822b958b2ff0001a7"),
</span><span class='line'>  "company_name" : "Advanced Cell Technology, Inc.",
</span><span class='line'>  "country_of_domicile" : "USA",
</span><span class='line'>  "security_name" : "ADVANCED CELL TECH INC",
</span><span class='line'>  "security_type" : "Common Stock",
</span><span class='line'>  "symbol" : "ACTC",
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Fitnesse from Jenkins]]></title>
    <link href="http://andrewslack.github.com/blog/2012/12/06/running-fitnesse-from-jenkins/"/>
    <updated>2012-12-06T14:00:00-07:00</updated>
    <id>http://andrewslack.github.com/blog/2012/12/06/running-fitnesse-from-jenkins</id>
    <content type="html"><![CDATA[<blockquote><p>As defenders of the code<br/>  we want to integrate our Fitnesse tests into the Team&#8217;s CI process<br/>  So that the team will be alerted to any failures when assumptions are broken</p></blockquote>


<p>In order to run our tests from Jenkins we need to make sure that our tests are runnable from the command line.  As luck would have it there is a Fitnesse plugin, called Trinidad, that is callable from Maven.</p>

<figure class='code'><figcaption><span>[Running the Trinidad plugin at the integration-test build phase] []  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>maven-trinidad-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>20090818<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>      <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>          <span class="nt">&lt;phase&gt;</span>integration-test<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>          <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>              <span class="nt">&lt;goal&gt;</span>run-tests<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>          <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>              <span class="nt">&lt;testEngine&gt;</span>fit<span class="nt">&lt;/testEngine&gt;</span>
</span><span class='line'>              <span class="nt">&lt;testRepositoryType&gt;</span>fitnesse<span class="nt">&lt;/testRepositoryType&gt;</span>
</span><span class='line'>              <span class="nt">&lt;testRepositoryUri&gt;</span>${basedir}/target/test-classes/fitnesse<span class="nt">&lt;/testRepositoryUri&gt;</span>
</span><span class='line'>              <span class="nt">&lt;stopAfterFirstFailure&gt;</span>false<span class="nt">&lt;/stopAfterFirstFailure&gt;</span>
</span><span class='line'>              <span class="nt">&lt;breakBuildOnFailure&gt;</span>true<span class="nt">&lt;/breakBuildOnFailure&gt;</span>
</span><span class='line'>              <span class="nt">&lt;resultRepositoryUri&gt;</span>${basedir}/target/ErrorLogs/${fitnesse.root}<span class="nt">&lt;/resultRepositoryUri&gt;</span>             
</span><span class='line'>              <span class="nt">&lt;singleTest&gt;</span>${fitnesse.test}<span class="nt">&lt;/singleTest&gt;</span>
</span><span class='line'>              <span class="nt">&lt;singleSuite&gt;</span>${fitnesse.suite}<span class="nt">&lt;/singleSuite&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will run the tests locally and spit out the results.  In order for this to work we need make sure that the fitnesse tests are copied into the build area prior to the integration-test phase.</p>

<figure class='code'><figcaption><span>[Copy the test cases into the build area] []  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>build-helper-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.3<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>  <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>     <span class="nt">&lt;id&gt;</span>copy-fitnesse-tests<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>     <span class="nt">&lt;phase&gt;</span>generate-sources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>     <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>       <span class="nt">&lt;goal&gt;</span>add-test-resource<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>     <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>       <span class="nt">&lt;resources&gt;</span>
</span><span class='line'>         <span class="nt">&lt;resource&gt;</span>
</span><span class='line'>           <span class="nt">&lt;directory&gt;</span>${basedir}/src/test/fitnesse/MyTests<span class="nt">&lt;/directory&gt;</span>
</span><span class='line'>           <span class="nt">&lt;targetPath&gt;</span>fitnesse/FitNesseRoot/MyTests<span class="nt">&lt;/targetPath&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/resource&gt;</span>
</span><span class='line'>       <span class="nt">&lt;/resources&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The nice thing here is that the tests are under source control and are copied into the temporary build area (target) and can be disposed after the lifetime of the test execution.</p>

<p>From Jenkins setup a maven based job and configure it as if wwere running it from command line:</p>

<figure class='code'><figcaption><span>[Copy the test cases into the build area] []  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>mvn clean install -Dfitnesse.suite=MyTests
</span></code></pre></td></tr></table></div></figure>


<p>This will build your project and run the fitnesse tests.</p>

<p>Overall there are some obvious advantages doing things this way:</p>

<ul>
<li>No need to depend on a central Fitnesse server to upload your tests and code dependencies to.</li>
<li>Run on any version of fitnesse.  So if you need the latest you can update your dependencies are rerun.</li>
<li>Tests are under source control and as such their history is preserved as well as their content</li>
</ul>

]]></content>
  </entry>
  
</feed>
